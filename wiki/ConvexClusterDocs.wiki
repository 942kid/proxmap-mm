#summary Usage for _convexcluster_.

= Introduction =

I have only tested on a Linux platform but there is no reason this C++ program should not run on Mac or Windows with proper adjustments to the makefile. Please contact me if you run into issues on Linux or other platforms.

= Compile =

Please follow the general instructions found in Intro. We also included some utility functions for generating the k nearest neighbor weight file, so if you need to compile these, this can be done with commands *make distance* and *make knn_weights* from the *src/convex_clustering* directory.
{{{
[garyc@ssb202q-1 trunk]$ cd src/convex_clustering/
[garyc@ssb202q-1 convex_clustering]$ make distance
mpic++ -o ../../bin/distance   -DUSE_MPI distance.cpp
[garyc@ssb202q-1 convex_clustering]$ make knn_weights 
mpic++ -o ../../bin/knn_weights   -DUSE_MPI knn_weights.cpp
}}}

= Running examples =

This section should get you up and running quickly, using Fisher's famous Iris data set, downloaded from the UCI machine learning repository. Enter the *examples/convex_clustering* directory.
{{{
[garyc@ssb202q-1 trunk]$ cd examples/convex_clustering/
[garyc@ssb202q-1 convex_clustering]$ ls
config.iris           iris.clusters        iris.stderr   plot_path.r
config.iris.template  iris.labels          iris.txt      run_iris.sh
iris_clusters         iris_projection.pdf  plot_iris.sh  weights.ph4.k5
}}}
 You can edit the *run_iris.sh* file if you wish to edit the weighting parameters _k_ and _phi_.
{{{
[garyc@ssb202q-1 convex_clustering]$ head run_iris.sh 
#!/bin/bash

# k nearest neighbors
k=5
# soft thresholding parameters
phi=4

datafile='iris.txt'
weightfile=weights.ph$phi.k$k
n=`cat $datafile|wc -l`
}}} 
Running _convexcluster_ simply entails executing *./run_iris.sh*. 
{{{
[garyc@ssb202q-1 convex_clustering]$ ./run_iris.sh 
Weight range is 0.919739 to 0.999204
}}}
We also include a plotting utility to conveniently view the cluster results on the first two principal components of the data. You will need *R* and the R libary *ggplot2* in order for this script to run. Execute *./plot_iris.sh* to run the script, and open *iris_projection.pdf* in your favorite PDF viewer. You should be able to see the cluster path depicted as:

https://proxmap-mm.googlecode.com/svn/trunk/examples/convex_clustering/iris_projection.png

= Customizing _convexcluster_ (optional)=

_convexcluster_ reads in input parameters from a configuration file that is specified as the second argument (see the example *./run_iris.sh* file). The program requires only a handful of input parameters to run. There are also several optional tuning parameters, but they are set to reasonable defaults internally, and overridden only when they are present in the configuration file. The following are required parameters:

 * USE_CPU: set this to 1 in general to run on the CPU
 * USE_GPU: set this to 1 in general to run on the GPU (note that you can run on both devices but this is obviously not ideal for performance if you already have a GPU).
 * DATAPOINTS: the number of rows (observations) in your data matrix.
 * VARIABLES: the number of columns (features) in your data matrix.
 * WEIGHTS: the weighting file that is generated by our knn_weights utility.
 * GENOTYPES: although this field name seems misleading, this field simply specifies the name of the data file. You don't necessarily need genotypes in the dataset.

If you have a GPU the following parameters are required:

 * PLATFORM_ID: OpenCL can query the number of platforms on your machine. Platforms include CPU or GPU usually. Running the *CLInfo* utility from the OpenCL SDK will give you the platform ID, which is an integer starting from 0.
 * DEVICE_ID: OpenCL can query the number of devices on your machine for a specific platform. Running the *CLInfo* utility from the OpenCL SDK will give you the device ID listed under each platform, given as an integer starting from 0.
 * KERNELS: Specify the full path of your installation, appended with the string *src/convex_clustering/kernels/*.  For example: */home/garyc/proxmap-mm-read-only/src/convex_clustering/kernels/*

Some optional parameters:

 * PRINT_THRESHOLD: Sometimes you may not want to write to disk the matrix of cluster centers at every point on the regularization path. When this parameter is set to zero, every matrix is printed out. For higher values, a write is performed only when the norm of the difference between the previous matrix and the current matrix exceeds this threshold.
 * MAX_ITER: The maximum number of iterations to carry out when minimizing the objective function at a particular value of the regularization parameter mu.
 * OUTPUT_PATH: Make a directory first that will store the sequence of files that store the cluster centers.  Specify the path of this directory here.
 * OBJ_EPSILON: Specify the tolerance for convergence here. If we are less than MAX_ITER and the previous objective minus the current objective is less than this value, we have declared convergence.
 * MU_MIN: The smallest non-zero value of the regularization parameter to begin the path from.
 * MU_INCREMENT: The value to increment mu by.